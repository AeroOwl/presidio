variables:
  GOBIN: '$(GOPATH)/bin'
  GOPATH: '$(system.defaultWorkingDirectory)/gopath'
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)'
  GOROOT: '/usr/local/go1.11'

jobs: # A job is a collection of steps to be run by an agent 	
- job: BuildServices
  timeoutInMinutes: 90  # how long to run the job before automatically cancelling	
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - bash: |
      if [ $(Build.Reason) = "BuildCompletion"  ]; then
              echo '##vso[task.setvariable variable=DEPS_LABEL]$(Build.TriggeredBy.BuildId)'
              echo set deps label to build id: $(Build.TriggeredBy.BuildId)
      else
              echo '##vso[task.setvariable variable=DEPS_LABEL]latest-dev'
              echo set deps label to latest-dev:  latest-dev
      fi
    displayName: 'Set DEPS label'

  - task: Docker@2
    inputs:
      containerRegistry: $(registry)
      command: 'login'

  - bash: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      mv !(gopath) '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    displayName: 'Setup Go Env'

  - task: CopyFiles@2
    displayName: 'Copy Makefile to Artifact Staging Directory'
    inputs:
      Contents: '**/src/github.com/Microsoft/presidio/Makefile'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      CleanTargetFolder: true
      flattenFolders: true
    enabled: false

  - task: CopyFiles@2
    displayName: 'Copy Chart to Artifact Staging Directory'
    inputs:
      Contents: '**/src/github.com/Microsoft/presidio/charts/**'
      TargetFolder: charts
      CleanTargetFolder: true

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Makefile Artifact'
    inputs:
      artifactName: dropmakefile
      targetPath: '$(Build.ArtifactStagingDirectory)'
    enabled: false

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: dropchart'
    inputs:
      PathtoPublish: charts
      ArtifactName: dropchart

  - bash: |
      echo "label: " $DEPS_LABEL
      echo "registry:" $(registry)
      export DOCKER_REGISTRY=ֿ$(name)".azurecr.io"
      echo ״docker registry:״  $(name)".azurecr.io"
      echo ״docker registry:״ $DOCKER_REGISTRY
      curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      dep ensure      
      make DOCKER_REGISTRY=$(registry_name).azurecr.io PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$DEPS_LABEL test-functional
    workingDirectory: '$(modulePath)'
    displayName: 'Build & Test '

  - bash: |
      make DOCKER_REGISTRY=$(registry_name).azurecr.io PRESIDIO_LABEL=$(Build.BuildID) docker-push
      make DOCKER_REGISTRY=$(registry_name).azurecr.io PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(Build.TriggeredBy.BuildId) docker-push-latest-dev-deps
      make DOCKER_REGISTRY=$(registry_name).azurecr.io PRESIDIO_LABEL=$(Build.BuildId) docker-push-latest-dev
    workingDirectory: '$(modulePath)'
    displayName: 'Push Docker Images'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'OSS Component Detection'
    inputs:
      scanType: '$(Parameters.scanType)'
    continueOnError: true